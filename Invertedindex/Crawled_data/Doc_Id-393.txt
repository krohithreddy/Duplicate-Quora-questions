Neo4j - Overview

https://www.tutorialspoint.com/neo4j/neo4j_overview.htm

Neo4j, Tutorial, Learning, Overview, Data Model, Environment Setup, Building Blocks, CQL Introduction, Creating Nodes, Creating a Relationship, Merge Command, Set, Delete, Remove, Foreach, Match, Optional Match, Where, Return, Order By, Limit, Skip, With, Unwind Clause, Count, String, Aggregation Function, Backup and Restore, Index, Create Unique Constraint, Drop Unique.

August-15-2017-02:34:07

Neo4j is the world's leading open source Graph Database which is developed using Java technology. It is highly scalable and schema free (NoSQL). What is a Graph Database? A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links. It is composed of two elements - nodes (vertices) and relationships (edges). Graph database is a database used to model the data in the form of graph. In here, the nodes of a graph depict the entities while the relationships depict the association of these nodes. Popular Graph Databases Neo4j is a popular Graph Database. Other Graph Databases are Oracle NoSQL Database, OrientDB, HypherGraphDB, GraphBase, InfiniteGraph, and AllegroGraph. Why Graph Databases? Nowadays, most of the data exists in the form of the relationship between different objects and more often, the relationship between the data is more valuable than the data itself. Relational databases store highly structured data which have several records storing the same type of data so they can be used to store structured data and, they do not store the relationships between the data. Unlike other databases, graph databases store relationships and connections as first-class entities. The data model for graph databases is simpler compared to other databases and, they can be used with OLTP systems. They provide features like transactional integrity and operational availability. RDBMS Vs Graph Database Following is the table which compares Relational databases and Graph databases. Sr.No RDBMS Graph Database 1 Tables Graphs 2 Rows Nodes 3 Columns and Data Properties and its values 4 Constraints Relationships 5 Joins Traversal Advantages of Neo4j Following are the advantages of Neo4j. Flexible data model − Neo4j provides a flexible simple and yet powerful data model, which can be easily changed according to the applications and industries. Real-time insights − Neo4j provides results based on real-time data. High availability − Neo4j is highly available for large enterprise real-time applications with transactional guarantees. Connected and semi structures data − Using Neo4j, you can easily represent connected and semi-structured data. Easy retrieval − Using Neo4j, you can not only represent but also easily retrieve (traverse/navigate) connected data faster when compared to other databases. Cypher query language − Neo4j provides a declarative query language to represent the graph visually, using an ascii-art syntax. The commands of this language are in human readable format and very easy to learn. No joins − Using Neo4j, it does NOT require complex joins to retrieve connected/related data as it is very easy to retrieve its adjacent node or relationship details without joins or indexes. Features of Neo4j Following are the notable features of Neo4j − Data model (flexible schema) − Neo4j follows a data model named native property graph model. Here, the graph contains nodes (entities) and these nodes are connected with each other (depicted by relationships). Nodes and relationships store data in key-value pairs known as properties. In Neo4j, there is no need to follow a fixed schema. You can add or remove properties as per requirement. It also provides schema constraints. ACID properties − Neo4j supports full ACID (Atomicity, Consistency, Isolation, and Durability) rules. Scalability and reliability − You can scale the database by increasing the number of reads/writes, and the volume without effecting the query processing speed and data integrity. Neo4j also provides support for replication for data safety and reliability. Cypher Query Language − Neo4j provides a powerful declarative query language known as Cypher. It uses ASCII-art for depicting graphs. Cypher is easy to learn and can be used to create and retrieve relations between data without using the complex queries like Joins. Built-in web application − Neo4j provides a built-in Neo4j Browser web application. Using this, you can create and query your graph data. Drivers − Neo4j can work with − REST API to work with programming languages such as Java, Spring, Scala etc. Java Script to work with UI MVC frameworks such as Node JS. It supports two kinds of Java API: Cypher API and Native Java API to develop Java applications. In addition to these, you can also work with other databases such as MongoDB, Cassandra, etc. Indexing − Neo4j supports Indexes by using Apache Lucence.

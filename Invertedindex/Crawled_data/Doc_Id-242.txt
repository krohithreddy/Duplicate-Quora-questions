Memcached - Set Data

https://www.tutorialspoint.com/memcached/memcached_set_data.htm

Memcached, Tutorial, Beginners, Overview, Environment, Connection,  Set Data, Add Data, Replace Data, Append Data, Prepend Data, Get Data, Delete Data, Stats, Clear Data

August-15-2017-02:34:11

Memcached set command is used to set a value to key; if the key does not exist, a new key is created and value is assigned to that key. Syntax The basic syntax of Memcached set command is as shown below − 
set key flags exptime bytes [noreply] 
value 
 The keywords in the syntax are as described below − key - It is the name of the unique key by which data is accessed. flags - It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved. exptime - It is the expiration time (seconds) of data stored in cache. A 0 value means "never expire", i.e. it should not be removed from the cache unless required. If the exptime is more than 30 days then Memcached interprets it as UNIX timestamp for expiration. bytes - This is the length of the data in bytes that needs to be stored in Memcached. noreply (optional) - This parameter informs the server not to send any reply. value - It is the data that needs to be stored. The data needs to be given on the new line after executing the command with the above options. Example In the following example, we use − key → tutorialspoint flag → 0 exptime → 900 (expiry time in seconds) bytes → 9 (size of data balue in bytes) value → memcached 
set tutorialspoint 0 900 9
memcached
STORED

get tutorialspoint
VALUE tutorialspoint 0 9
memcached

END
 Output The output of the command is as shown below − 
STORED
 STORED indicates success. ERROR indicates incorrect syntax or error while saving data. Set Data Using Java Application To set a key in Memcached server, we need to use Memcached set method. The set method returns Future Object. We need to include java.util.concurrent.Future interface in order to store output of set method. Example 
import java.net.InetSocketAddress;
import java.util.concurrent.Future;

import net.spy.memcached.MemcachedClient;

public class MemcachedJava {
   public static void main(String[] args) {
   
      try{
         // Connecting to Memcached server on localhost
         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress("127.0.0.1", 11211));
         System.out.println("Connection to server sucessful.");
      
         // now set data into memcached server
         Future fo = mcc.set("tutorialspoint", 900, "Free Education");
      
         // print status of set method
         System.out.println("set status:" + fo.get());
         
         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("tutorialspoint"));

         // Shutdowns the memcached client
         mcc.shutdown();
         
      }catch(Exception ex){
         System.out.println( ex.getMessage() );
      }
   }
}
 This program should set the value memcached with key tutorialspoint. If the key-value pair is set successfully, the get method of Future object should return true. Output On compiling and executing the program, you get to see the following output − 
Connection to server successful.
set status:true
tutorialspoint value in cache - Free Education

Memcached - Add Data

https://www.tutorialspoint.com/memcached/memcached_add_data.htm

Memcached, Tutorial, Beginners, Overview, Environment, Connection,  Set Data, Add Data, Replace Data, Append Data, Prepend Data, Get Data, Delete Data, Stats, Clear Data

August-15-2017-02:34:11

Memcached add command is used to set a value to a new key. If the key already exists, then it gives the output NOT_STORED. Syntax The basic syntax of Memcached add command is as shown below − 
add key flags exptime bytes [noreply]
value
 The keywords in the syntax are as described below − key - It is the name of the unique key by which data is accessed. flags - It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved. exptime - It is the expiration time (seconds) of data stored in cache. A 0 value means "never expire", i.e. it should not be removed from the cache unless required. If the exptime is more than 30 days then Memcached interprets it as UNIX timestamp for expiration. bytes - This is the length of the data in bytes that needs to be stored in Memcached. noreply (optional) - This parameter informs the server not to send any reply. value - It is the data that needs to be stored. The data needs to be given on the new line after executing the command with the above options. Example In the following example, we use − key → new_key flag → 0 exptime → 900 (expiry time in seconds) bytes → 10 (size of data balue in bytes) value → data_value 
add new_key 0 900 10
data_value
STORED
get new_key
VALUE new_key 0 10
data_value
END
 Output If the data is stored successfully, the output should be − 
STORED
 STORED indicates success. NOT_STORED indicates the data is not stored in Memcached. Failure Output Now, if we try to add 'new_key' again, it should give the following error − 
add new_key 0 900 5
redis
NOT_STORED
 Add Data Using Java Application To store data in a Memcached server, we use the Memcached add method. Example In last example, we have set key tutorialspoint. In this example, we shall try to demonstrate adding data having existing key. 
import java.net.InetSocketAddress;
import java.util.concurrent.Future;

import net.spy.memcached.MemcachedClient;

public class MemcachedJava {
   public static void main(String[] args) {
   
      try{
   
         // Connecting to Memcached server on localhost
         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress("127.0.0.1", 11211));
         System.out.println("Connection to server sucessful.");

         // add data to memcached server
         Future fo = mcc.set("tutorialspoint", 900, "Free Education");

         // print status of set method
         System.out.println("set status:" + fo.get());

         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("tutorialspoint"));

         // try to add data with existing key
         fo = mcc.add("tutorialspoint", 900, "memcached");

         // print status of set method
         System.out.println("add status:" + fo.get());

         // adding a new key to memcached server
         fo = mcc.add("codingground", 900, "All Free Compilers");

         // print status of set method
         System.out.println("add status:" + fo.get());
         
         // retrieve and check the value from cache
         System.out.println("codingground value in cache - " + mcc.get("codingground"));

         // Shutdowns the memcached client
         mcc.shutdown();
         
      }catch(Exception ex){
         System.out.println(ex.getMessage());
      }
   }
}
 Output On compiling and executing the program, you get to see the following output − 
Connection to server successful.
set status:true
tutorialspoint value in cache - Free Education
add status:false
add status:true
codingground value in cache - All Free Compilers
 The first 'add status' displays false because the key tutorialspoint already exists in memcached server. The second 'add status' displays true indicates that the key is successfully stored.

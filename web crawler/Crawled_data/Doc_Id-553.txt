PostgreSQL - Comparison Operators

https://www.tutorialspoint.com/postgresql/postgresql_comparison-operators.htm

PostgreSQL, Tutorial, Programming, Database, Overview, Environment Setup, Syntax, Data Type, Create, Select, Drop Database, Drop, Create Table, Schema, Insert, Select, Update, Delete Query, Operators, Expressions, Where, Like, Limit, Order By, Group By, With, Having Clause, AND and OR Operators, Distinct Keyword, Constraints, Joins, Unions Clause, NULL Values, Alias Syntax, Triggers, Indexes, Alter Table Command, Truncate Table Command, Views, Transactions, Locks, Sub Queries, Auto Increment, Privileges, DATE/TIME Functions and Operators, Functions, Useful Functions, C/C++, JAVA, PHP, Perl, Python Interface.

August-15-2017-02:34:22

Consider the table COMPANY having records as follows − 
testdb=# select * from COMPANY;
 id | name  | age | address   | salary
----+-------+-----+-----------+--------
  1 | Paul  |  32 | California|  20000
  2 | Allen |  25 | Texas     |  15000
  3 | Teddy |  23 | Norway    |  20000
  4 | Mark  |  25 | Rich-Mond |  65000
  5 | David |  27 | Texas     |  85000
  6 | Kim   |  22 | South-Hall|  45000
  7 | James |  24 | Houston   |  10000
(7 rows)
 Here are simple examples showing the usage of PostgresSQL Comparison Operators. Here, we have used the WHERE clause, which will be explained in a separate chapter, but for now, you can understand that the WHERE clause is used to put a conditional statement along with the SELECT statement. The following SELECT statement lists down all the records having SALARY greater than 50,000.00 − 
testdb=# SELECT * FROM COMPANY WHERE SALARY > 50000;
 The above given PostgreSQL statement will produce the following result − 
 id | name  | age |address    | salary
----+-------+-----+-----------+--------
  4 | Mark  |  25 | Rich-Mond |  65000
  5 | David |  27 | Texas     |  85000
(2 rows)
 The following SELECT statement lists down all the records having SALARY equal to 20,000.00 − 
testdb=#  SELECT * FROM COMPANY WHERE SALARY = 20000;
 The above given PostgreSQL statement will produce the following result − 
  id | name  | age |  address    | salary
 ----+-------+-----+-------------+--------
   1 | Paul  |  32 | California  |  20000
   3 | Teddy |  23 | Norway      |  20000
(2 rows)
 The following SELECT statement lists down all the records having SALARY not equal to 20,000.00 − 
testdb=#  SELECT * FROM COMPANY WHERE SALARY != 20000;
 The above given PostgreSQL statement will produce the following result − 
 id | name  | age |  address    | salary
----+-------+-----+-------------+--------
  2 | Allen |  25 | Texas       |  15000
  4 | Mark  |  25 | Rich-Mond   |  65000
  5 | David |  27 | Texas       |  85000
  6 | Kim   |  22 | South-Hall  |  45000
  7 | James |  24 | Houston     |  10000
(5 rows)
 The following SELECT statement lists down all the records having SALARY not equal to 20,000.00 − 
testdb=# SELECT * FROM COMPANY WHERE SALARY <> 20000;
 The above given PostgreSQL statement will produce the following result − 
 id | name  | age | address    | salary
----+-------+-----+------------+--------
  2 | Allen |  25 | Texas      |  15000
  4 | Mark  |  25 | Rich-Mond  |  65000
  5 | David |  27 | Texas      |  85000
  6 | Kim   |  22 | South-Hall |  45000
  7 | James |  24 | Houston    |  10000
(5 rows)
 The following SELECT statement lists down all the records having SALARY greater than or equal to 65,000.00 − 
testdb=# SELECT * FROM COMPANY WHERE SALARY >= 65000;
 The above given PostgreSQL statement will produce the following result − 
 id | name  | age |  address  | salary
----+-------+-----+-----------+--------
  4 | Mark  |  25 | Rich-Mond |  65000
  5 | David |  27 | Texas     |  85000
(2 rows)
 postgresql_operators.htm

Memcached - Replace Data

https://www.tutorialspoint.com/memcached/memcached_replace_data.htm

Memcached, Tutorial, Beginners, Overview, Environment, Connection,  Set Data, Add Data, Replace Data, Append Data, Prepend Data, Get Data, Delete Data, Stats, Clear Data

August-15-2017-02:34:11

Memcached replace command is used to replace the value of an existing key. If the key does not exist, then it gives the output NOT_STORED. Syntax The basic syntax of Memcached replace command is as shown below − 
replace key flags exptime bytes [noreply]
value
 The keywords in the syntax are as described below − key - It is the name of the unique key by which data is accessed. flags - It is the 32-bit unsigned integer that the server stores with the data provided by the user, and returns along with the data when the item is retrieved. exptime - It is the expiration time (seconds) of data stored in cache. A 0 value means "never expire", i.e. it should not be removed from the cache unless required. If the exptime is more than 30 days then Memcached interprets it as UNIX timestamp for expiration. bytes - This is the length of the data in bytes that needs to be stored in Memcached. noreply (optional) - This parameter informs the server not to send any reply. value - It is the data that needs to be stored. The data needs to be given on the new line after executing the command with the above options. Example For example we shall use − key → mykey flag → 0 exptime → 900 bytes → 10 (expiry time in seconds) value → data_value (size of data value in bytes) Here, we use 'mykey' as the key and store data_value in it. After this, the same key is replaced with 'some_other_value'. 
add mykey 0 900 10
data_value
STORED
get mykey
VALUE mykey 0 10
data_value
END
replace mykey 0 900 16
some_other_value
get key
VALUE mykey 0 16
some_other_value
END
 Output The output of the command is as shown below − 
STORED
 STORED indicates success. NOT_STORED indicates the data is not stored in Memcached. Replace Data Using Java Application To replace data in a Memcached server, you need to use the Memcached replace method. Example 
import java.net.InetSocketAddress;
import java.util.concurrent.Future;

import net.spy.memcached.MemcachedClient;

public class MemcachedJava {
   public static void main(String[] args) {
   
      try {
         //Connecting to Memcached server on localhost
         MemcachedClient mcc = new MemcachedClient(new InetSocketAddress("127.0.0.1", 11211));
         System.out.println("Connection to server sucessful.");

         // First add a key and value
         Future fo = mcc.set("tutorialspoint", 900, "Free Education");

         // print status of add method
         System.out.println("add status:" + fo.get());

         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("tutorialspoint"));

         // adding a new key to memcached server
         fo = mcc.replace("tutorialspoint", 900, "Largest Tutorials' Library");

         // print status of set method
         System.out.println("replace status:" + fo.get());

         // retrieve and check the value from cache
         System.out.println("tutorialspoint value in cache - " + mcc.get("tutorialspoint"));

         // Shutdowns the memcached client
         mcc.shutdown();
         
      }catch(Exception ex){
         System.out.println( ex.getMessage() );
      }
   }
}
 Output On compiling and executing the program, you get to see the following output − 
Connection to server successful.
set status:true
tutorialspoint value in cache - Free Education
Replace status:true
tutorialspoint value in cache - Largest Tutorials' Library

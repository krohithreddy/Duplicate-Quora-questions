OrientDB - Basic Concepts

https://www.tutorialspoint.com/orientdb/orientdb_basic_concepts.htm

OrientDB, Tutorial, Learning, Beginners, Overview, Installation, Basic Concepts, Data Types, Console Modes, Create Database, Alter Database, Backup Database, Restore Database, Connect Database, Disconnect Database, Info Database, List Database, Freeze Database, Release Database, Config Database, Export Database, Import Database, Commit Database, Rollback Database, Optimize Database, Drop Database, Insert Record, Display Records, Load Record, Reload Record, Export Record, Update Record, Truncate Record, Delete Record, Create Class, Alter Class, Truncate Class, Drop Class, Create Cluster, Alter Cluster, Truncate Cluster, Drop Cluster, Create Property, Alter Property, Drop Property, Create Vertex, Move Vertex, Delete Vertex, Create Edge, Update Edge, Delete Edge, Functions, Sequences, Indexes, Transactions, Hooks, Caching, Logging, Performance Tuning, Upgrading, Security, Studio, Java Interface, Python Interface.

August-15-2017-02:34:10

The main feature of OrientDB is to support multi-model objects, i.e. it supports different models like Document, Graph, Key/Value and Real Object. It contains a separate API to support all these four models. Document Model The terminology Document model belongs to NoSQL database. It means the data is stored in the Documents and the group of Documents are called as Collection. Technically, document means a set of key/value pairs or also referred to as fields or properties. OrientDB uses the concepts such as classes, clusters, and link for storing, grouping, and analyzing the documents. The following table illustrates the comparison between relational model, document model, and OrientDB document model âˆ’ Relational Model Document Model OrientDB Document Model Table Collection Class or Cluster Row Document Document Column Key/value pair Document field Relationship Not available Link Graph Model A graph data structure is a data model that can store data in the form of Vertices (Nodes) interconnected by Edges (Arcs). The idea of OrientDB graph database came from property graph. The vertex and edge are the main artifacts of the Graph model. They contain the properties, which can make these appear similar to documents. The following table shows a comparison between graph model, relational data model, and OrientDB graph model. Relational Model Graph Model OrientDB Graph Model Table Vertex and Edge Class Class that extends "V" (for Vertex) and "E" (for Edges) Row Vertex Vertex Column Vertex and Edge property Vertex and Edge property Relationship Edge Edge The Key/Value Model The Key/Value model means that data can be stored in the form of key/value pair where the values can be of simple and complex types. It can support documents and graph elements as values. The following table illustrates the comparison between relational model, key/value model, and OrientDB key/value model. Relational Model Key/Value Model OrientDB Key/Value Model Table Bucket Class or Cluster Row Key/Value pair Document Column Not available Document field or Vertex/Edge property Relationship Not available Link The Object Model This model has been inherited by Object Oriented programming and supports Inheritance between types (sub-types extends the super-types), Polymorphism when you refer to a base class and Direct binding from/to Objects used in programming languages. The following table illustrates the comparison between relational model, Object model, and OrientDB Object model. Relational Model Object Model OrientDB Object Model Table Class Class or Cluster Row Object Document or Vertex Column Object property Document field or Vertex/Edge property Relationship Pointer Link Before go ahead in detail, it is better to know the basic terminology associated with OrientDB. Following are some of the important terminologies. Record The smallest unit that you can load from and store in the database. Records can be stored in four types. Document Record Bytes Vertex Edge Record ID When OrientDB generates a record, the database server automatically assigns a unit identifier to the record, called RecordID (RID). The RID looks like #<cluster>:<position>. <cluster> means cluster identification number and the <position> means absolute position of the record in the cluster. Documents The Document is the most flexible record type available in OrientDB. Documents are softly typed and are defined by schema classes with defined constraint, but you can also insert the document without any schema, i.e. it supports schema-less mode too. Documents can be easily handled by export and import in JSON format. For example, take a look at the following JSON sample document. It defines the document details. 
{ 
   "id"        : "1201", 
   "name"      : "Jay", 
   "job"       : "Developer", 
   "creations" : [ 
      { 
         "name"    : "Amiga", 
         "company" : "Commodore Inc." 
      }, 
		
      { 
         "name"    : "Amiga 500", 
         "company" : "Commodore Inc." 
      } 
   ] 
} 
 RecordBytes Record Type is the same as BLOB type in RDBMS. OrientDB can load and store document Record type along with binary data. Vertex OrientDB database is not only a Document database but also a Graph database. The new concepts such as Vertex and Edge are used to store the data in the form of graph. In graph databases, the most basic unit of data is node, which in OrientDB is called a vertex. The Vertex stores information for the database. Edge There is a separate record type called the Edge that connects one vertex to another. Edges are bidirectional and can only connect two vertices. There are two types of edges in OrientDB, one is regular and another one lightweight. Class The class is a type of data model and the concept drawn from the Object-oriented programming paradigm. Based on the traditional document database model, data is stored in the form of collection, while in the Relational database model data is stored in tables. OrientDB follows the Document API along with OPPS paradigm. As a concept, the class in OrientDB has the closest relationship with the table in relational databases, but (unlike tables) classes can be schema-less, schema-full or mixed. Classes can inherit from other classes, creating trees of classes. Each class has its own cluster or clusters, (created by default, if none are defined). Cluster Cluster is an important concept which is used to store records, documents, or vertices. In simple words, Cluster is a place where a group of records are stored. By default, OrientDB will create one cluster per class. All the records of a class are stored in the same cluster having the same name as the class. You can create up to 32,767(2^15-1) clusters in a database. The CREATE class is a command used to create a cluster with specific name. Once the cluster is created you can use the cluster to save records by specifying the name during the creation of any data model. Relationships OrientDB supports two kinds of relationships: referenced and embedded. Referenced relationships means it stores direct link to the target objects of the relationships. Embedded relationships means it stores the relationship within the record that embeds it. This relationship is stronger than the reference relationship. Database The database is an interface to access the real storage. IT understands high-level concepts such as queries, schemas, metadata, indices, and so on. OrientDB also provides multiple database types. For more information on these types, see Database Types.
